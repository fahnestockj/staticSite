<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Fahnestockj</title>
    <link>https://fahnestockj.com/</link>
    <description>Recent content on Fahnestockj</description>
    <image>
      <url>https://fahnestockj.com/papermod-cover.png</url>
      <link>https://fahnestockj.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Apr 2022 09:41:20 -0400</lastBuildDate><atom:link href="https://fahnestockj.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abstraction in Software</title>
      <link>https://fahnestockj.com/posts/abstractioninsoftware/</link>
      <pubDate>Sun, 24 Apr 2022 09:41:20 -0400</pubDate>
      
      <guid>https://fahnestockj.com/posts/abstractioninsoftware/</guid>
      <description>The goal of this post is to unpack Cheng Lou&amp;rsquo;s On the Spectrum of Abstraction Talk given at React-Europe in 2016.
The more I learn about the various competing javascript tools like frameworks, libraries, etc the more confused I am by how there isn&amp;rsquo;t a set guide on if you want A use B. As a beginner most tools are entirely unclear on what their purpose is and why/how they help.</description>
    </item>
    
    <item>
      <title>GraphQL and REST</title>
      <link>https://fahnestockj.com/posts/graphql_rest/</link>
      <pubDate>Sat, 05 Mar 2022 10:44:54 -0500</pubDate>
      
      <guid>https://fahnestockj.com/posts/graphql_rest/</guid>
      <description>What is REST?  Representation State Transfer an architectural style for APIs which aims to be lightweight, scalable, and flexible. RESTful API&amp;rsquo;s follow this style by setting constraints like:
 clients and servers communicate resources with HTTP requests requests should be stateless meaning they only using the information on the request to determine the response   What is GraphQL?  GraphQL is a widely used query language for APIs which treats the data as a graph of relationships rather than a more &amp;ldquo;linear&amp;rdquo; collection of data.</description>
    </item>
    
    <item>
      <title>Immutability and React!</title>
      <link>https://fahnestockj.com/posts/immutability/</link>
      <pubDate>Sat, 12 Feb 2022 10:02:24 -0500</pubDate>
      
      <guid>https://fahnestockj.com/posts/immutability/</guid>
      <description>What is it Mutability in Javascript refers to the ability to change the state of an object after its creation.
 In Javascript some examples of immutable objects are language primitives. As the lowest atomic level of the language, primitives are immutable which allows easy comparison between values.
For example string primitives cannot be modified after they&amp;rsquo;re created.
const string1 = &amp;#39;foo&amp;#39; string1.concat(&amp;#39;bar&amp;#39;) console.log(string1) //foo string1 is not actually modified by its method, instead it the method returns a new string with the concatenation complete.</description>
    </item>
    
    <item>
      <title>Mappin</title>
      <link>https://fahnestockj.com/projects/mappin/</link>
      <pubDate>Sun, 12 Sep 2021 14:29:48 -0400</pubDate>
      
      <guid>https://fahnestockj.com/projects/mappin/</guid>
      <description>Data Visualization Mapping Web App Currently live at itliveiceflow.science!
The goal of this project was to provide easy access to the ice flow velocity data the ITS_LIVE project provides in a format that encourages exploration and curiosity.
Frameworks Used React with several Leaflet libraries to display the velocity mosaic and collect user inputs. The front end is displayed through a Django template which serves the React bundle. The Django project is hosted through Gunicorn and Nginx on a Digital Ocean droplet.</description>
    </item>
    
    <item>
      <title>6502 Computer</title>
      <link>https://fahnestockj.com/projects/6502/</link>
      <pubDate>Sat, 11 Sep 2021 15:48:05 -0400</pubDate>
      
      <guid>https://fahnestockj.com/projects/6502/</guid>
      <description>Used assembly programming to create a 16 bit binary to decimal converter which gathers inputs using processor interrupts and displays on a 16x2 character LCD. Design came from Ben Eater&amp;rsquo;s fantastic series on building and programming a 6502.
Gained experience breadboarding and debugging circuits including making a debounced single step clock to debug the early stages of the 6502.</description>
    </item>
    
    <item>
      <title>Algorithimic Stock Trader</title>
      <link>https://fahnestockj.com/projects/stonks/</link>
      <pubDate>Thu, 13 May 2021 12:19:53 -0400</pubDate>
      
      <guid>https://fahnestockj.com/projects/stonks/</guid>
      <description>A Flawless Mean Reversion Strategy ðŸš€ Key Indicators  ADX - Average Directional Index  Used to determine a time window to trade   BBands - Bollinger Bands   Used to catch overextensions (positive or negative) inside a time window
 if self.SlowADX &amp;gt; self.FastADX: self.log(&#39;TRADENOWWEEWWOOOO&#39;) if self.dataclose[0] &amp;lt; self.BBands.bot: self.log(&#39;Buy Create, %.2f&#39; %self.dataclose[0]) self.buy() if self.position.size &amp;lt; 0: self.buy(size = abs(self.position.size)) self.log(&#39;Short closed: %.2f&#39; %self.dataclose[0]) self.buy(size = self.</description>
    </item>
    
  </channel>
</rss>
